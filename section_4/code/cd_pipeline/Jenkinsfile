#!/usr/bin/groovy

pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    environment {
        PYTHONPATH = "${WORKSPACE}/section_4/code/cd_pipeline"
        registry = 'stavco9/hands-on-jenkins-app'
        registryCredential = '964f61be-7736-4d8f-af4a-8951fccf1fd9'
        dockerImage = ''
    }

    stages {

        // This is a test comment
        //stage("Test - Unit tests") {
        //    steps { runUnittests() }
        //}

        stage("Debug"){
            steps{
                sh 'type -a "docker"'
            }
        }

        stage("Build") {
            steps { 
                buildApp()
                pushApp()
            }
        }

        stage("Deploy - Dev") {
            steps { deploy('dev') }
        }

        stage("Test - UAT Dev") {
            steps { runUAT(8880) }
        }

        stage("Deploy - Stage") {
            steps { deploy('stage') }
        }


        stage("Test - UAT Stage") {
            steps { runUAT(8800) }
        }

        stage("Approve") {
            steps { approve() }
        }

        stage("Deploy - Live") {
            steps { deploy('live') }
        }

        stage("Test - UAT Live") {
            steps { runUAT(80) }
        }

    }
}


// steps
/* groovylint-disable-next-line NoDef */
def buildApp() {
    dir ('section_4/code/cd_pipeline' ) {
        dockerImage = docker.build("${registry}:${BUILD_NUMBER}")
    }
}

def pushApp(){
    docker.withRegistry( '', registryCredential ) { 
        dockerImage.push() 
    }
}

def deploy(environment) {

    def containerName = ''
    def port = ''

    if ("${environment}" == 'dev') {
        containerName = "app_dev"
        port = "8880"
    } 
    else if ("${environment}" == 'stage') {
        containerName = "app_stage"
        port = "8800"
    }
    else if ("${environment}" == 'live') {
        containerName = "app_live"
        port = "80"
    }
    else {
        println "Environment not valid"
        System.exit(0)
    }

    sh "docker ps -f name=${containerName} -q | xargs --no-run-if-empty docker stop"
    sh "docker ps -a -f name=${containerName} -q | xargs -r docker rm"
    sh "docker run -d -p ${port}:5000 --name ${containerName} hands-on-jenkins/myapp:${BUILD_NUMBER}"

}


def approve() {

    timeout(time:1, unit:'DAYS') {
        input('Do you want to deploy to live?')
    }

}


def runUnittests() {
    sh "pip3 install --no-cache-dir -r ./section_4/code/cd_pipeline/requirements.txt"
    sh "python3 section_4/code/cd_pipeline/tests/test_flask_app.py"
}


def runUAT(port) {
    sh "section_4/code/cd_pipeline/tests/runUAT.sh ${port}"
}

#!/usr/bin/groovy

pipeline {
    agent {
        kubernetes{
            label 'jenkins-kube-slave'
            defaultContainer 'jenkins-kube-slave'
        }
    }

    options {
        disableConcurrentBuilds()
    }

    environment {
        PYTHONPATH = "${WORKSPACE}/section_4/code/cd_pipeline"
        registry = 'stavco9/hands-on-jenkins-app'
        deployName = 'hands-on-jenkins-app'
        dnsZone = 'stavco9.com'
        registryCredential = '964f61be-7736-4d8f-af4a-8951fccf1fd9'
        kubernetesUrl = 'https://462d1a51-7954-49d8-afc4-078068dc1760.k8s.ondigitalocean.com'
        kubernetesCredential = '23ebcd6f-781e-40e0-943c-f31626dbc806'
        gmailApiCredential = 'db16b4f2-43b2-4b18-9188-ae8be3fea55e'
        kubernetesNamespace = 'hands-on-jenkins-app'
        dockerImage = ''
        dnsName = ''
        mailSubject = "Jenkins pipeline for project ${deployName}"
        mailTo = "stavco9@gmail.com"
    }

    stages {

        stage("Send Mail for pipeline start"){
            steps{
                script{
                    env.mailBody = "Started Jenkins pipeline for build ${BUILD_NUMBER} and branch ${BRANCH_NAME}"
                }

                sendMail()
            }
        }

        stage("Test - Unit tests") {
            steps { runUnittests() }
        }

        stage("Build") {
            agent {
                kubernetes{
                    label 'jenkins-docker-slave'
                    defaultContainer 'jenkins-docker-slave'
                }
            }
            steps { 
                buildApp()
                pushApp()
            }
        }

        stage("Deploy - Dev") {
            steps { deploy('dev') }
        }

        stage("Test - UAT Dev") {
            steps { runUAT() }
        }

        stage("Deploy - Stage") {
            steps { deploy('stage') }
        }


        stage("Test - UAT Stage") {
           steps { runUAT() }
        }

        stage("Deploy - Production") {
            when {
                branch 'master'
            }

            steps { deploy('prod') }
        }

        stage("Test - UAT Live") {
            when {
                branch 'master'
            }

            steps { runUAT() }
        }

        stage("Send Mail for pipeline finish"){
            steps{
                script{
                    env.mailBody = """
                    Finished Jenkins pipeline for build ${BUILD_NUMBER} and branch ${BRANCH_NAME}
                    the application is accessible in URL https://${dnsName}
                    """
                }

                sendMail(mailTo, mailSubject, mailBody)
            }
        }
    }
}


// steps
/* groovylint-disable-next-line NoDef */
def buildApp() {
    dir ('section_4/code/cd_pipeline' ) {
        dockerImage = docker.build("${registry}:${BUILD_NUMBER}")
    }
}

def pushApp(){
    docker.withRegistry( '', registryCredential ) { 
        dockerImage.push() 
    }
}

def deploy(environment) {

    def registryFullImage = "${registry}:${BUILD_NUMBER}"
    def appName = "${deployName}-${environment}"
    dnsName = "${deployName}.${environment}.${dnsZone}"

    if (environment == 'prod'){
        dnsName = "${deployName}.${dnsZone}"
    }

    //else {
    //   println "Environment not valid"
    //    System.exit(0)
    //}

    dir ('section_4/code/cd_pipeline' ) {
        // Replace image tag with the new tag and all the environment names
        sh """#!/bin/bash 

              sed -i 's|image: .*${'$'}|image: '"${registryFullImage}"'|g' k8s/deployment.yaml
              sed -i 's|name: ${deployName}.*${'$'}|name: '"${appName}"'|g' k8s/*.yaml
              sed -i 's|env: .*${'$'}|env: '"${environment}"'|g' k8s/*.yaml
              sed -i 's|serviceName: .*${'$'}|serviceName: '"${appName}"'|g' k8s/ingress.yaml
              sed -i 's|secretName: .*${'$'}|secretName: '"${appName}"'|g' k8s/ingress.yaml
              sed -i 's|host: .*${'$'}|host: '"${dnsName}"'|g' k8s/ingress.yaml
              sed -i '/- hosts:/!b;n;c\\    - '"${dnsName}"'' k8s/ingress.yaml
        """

        withKubeConfig([
                credentialsId: kubernetesCredential,
                serverUrl: kubernetesUrl,
                namespace: kubernetesNamespace
            ]){
            sh 'kubectl apply -f k8s/deployment.yaml -f k8s/service.yaml -f k8s/ingress.yaml'
        }
    }
    //sh("echo http://`kubectl --namespace=production get service/${FE_SVC_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'` > ${FE_SVC_NAME}")

}


def approve() {

    timeout(time:1, unit:'DAYS') {
        input('Do you want to deploy to live?')
    }

}


def runUnittests() {
    sh "pip3 install --no-cache-dir -r ./section_4/code/cd_pipeline/requirements.txt"
    sh "python3 section_4/code/cd_pipeline/tests/test_flask_app.py"
}

def sendMail() {
    dir ('section_4/code/cd_pipeline/mail' ) {
        withCredentials([file(credentialsId: gmailApiCredential, variable: 'GMAIL_TOKEN')]) {
            sh 'printenv'
            sh "pip3 install --no-warn-script-location --no-cache-dir --upgrade -r ./requirements.txt"
            sh "python3 jenkinsMail.py"
        }
    }
}

def runUAT() {
    sh "section_4/code/cd_pipeline/tests/runUAT.sh ${dnsName}"
}

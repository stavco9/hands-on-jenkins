#!/usr/bin/groovy

pipeline {
    agent {
        kubernetes{
            label 'jenkins-kube-slave'
            defaultContainer 'jenkins-kube-slave'
        }
    }

    options {
        disableConcurrentBuilds()
    }

    environment {
        PYTHONPATH = "${WORKSPACE}/section_4/code/cd_pipeline"
        registry = 'stavco9/hands-on-jenkins-app'
        deployName = 'hands-on-jenkins-app'
        dnsZone = 'stavco9.com'
        registryCredential = '964f61be-7736-4d8f-af4a-8951fccf1fd9'
        dockerImage = ''
    }

    stages {

        stage("Test - Unit tests") {
            steps { runUnittests() }
        }

        //stage("Build") {
        //    agent {
        //        kubernetes{
        //            label 'jenkins-docker-slave'
        //            defaultContainer 'jenkins-docker-slave'
        //        }
        //    }
        //    steps { 
        //        buildApp()
        //        pushApp()
        //    }
        //}

        stage("Deploy - Dev") {
            steps { deploy('dev') }
        }

        stage("Test - UAT Dev") {
            steps { runUAT(8880) }
        }

        stage("Deploy - Stage") {
            steps { deploy('stage') }
        }


        stage("Test - UAT Stage") {
            steps { runUAT(8800) }
        }

        stage("Approve") {
            steps { approve() }
        }

        stage("Deploy - Production") {
            when {
                branch 'master'
            }

            steps { deploy('prod') }
        }

        stage("Test - UAT Live") {
            steps { runUAT(80) }
        }

    }
}


// steps
/* groovylint-disable-next-line NoDef */
def buildApp() {
    dir ('section_4/code/cd_pipeline' ) {
        dockerImage = docker.build("${registry}:${BUILD_NUMBER}")
    }
}

def pushApp(){
    docker.withRegistry( '', registryCredential ) { 
        dockerImage.push() 
    }
}

def deploy(environment) {

    def registryFullImage = "${registry}:${BUILD_NUMBER}"
    def appName = "${deployName}-${environment}"
    def dnsName = "${deployName}.${environment}.${dnsZone}"

    //echo appName

    //else {
    //   println "Environment not valid"
    //    System.exit(0)
    //}

    dir ('section_4/code/cd_pipeline' ) {
        // Replace image tag with the new tag and all the environment names
        sh'''
            sed -i "s|image: .*$|image: ${registryFullImage}|g" k8s/deployment.yaml
            sed -i "s|name: ${deployName}.*$|name: ${appName}|g" k8s/*.yaml
            sed -i "s|serviceName: .*$|serviceName: ${appName}|g" k8s/ingress.yaml
            sed -i "s|host: .*$|host: ${dnsName}|g" k8s/ingress.yaml
            sed -i '/- hosts:/!b;n;c\\    - '"${dnsName}"'' k8s/ingress.yaml
        '''
        sh "kubectl apply -f k8s/*.yaml"
    }
    //sh("echo http://`kubectl --namespace=production get service/${FE_SVC_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'` > ${FE_SVC_NAME}")

}


def approve() {

    timeout(time:1, unit:'DAYS') {
        input('Do you want to deploy to live?')
    }

}


def runUnittests() {
    sh "pip3 install --no-cache-dir -r ./section_4/code/cd_pipeline/requirements.txt"
    sh "python3 section_4/code/cd_pipeline/tests/test_flask_app.py"
}


def runUAT(port) {
    sh "section_4/code/cd_pipeline/tests/runUAT.sh ${port}"
}
